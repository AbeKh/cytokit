panel.background = list(col = "white"),
strip.background = list(col = "white")
),
xlim = c(3.25, 6), ylim = c(3.5, 6.5), xbin = 0, pos=c(.5,.5)
)
gsm <- expand.grid(experiments, variants) %>% set_names(c('experiment', 'variant')) %>%
mutate(path=str_glue('{data_dir}/{experiment}/output/{variant}/cytometry/data.fcs')) %>%
mutate(donor=str_to_upper(str_extract(experiment, '[dD]\\d{2}'))) %>%
mutate(replicate=str_extract(experiment, 'Rep[AB]|r[12]')) %>%
mutate(replicate=case_when(
replicate == 'r1' ~ 'RepA',
replicate == 'r2' ~ 'RepB',
TRUE ~ replicate
)) %>%
mutate(sample=str_glue('{donor}_{replicate}_{variant}')) %>%
as('AnnotatedDataFrame')
sampleNames(gsm) <- gsm@data$sample
load_fcs <- function(path, donor, replicate) {
fr <- read.FCS(path, column.pattern='PHA', invert.pattern = TRUE)
if (donor == 'D22' && replicate == 'RepB'){
d <- exprs(fr)
mask <- d[,'tilex'] < 4 | d[,'tiley'] > 2
print(sprintf('Removing %s rows of %s for file %s', sum(!mask), nrow(fr), path))
fr <- Subset(fr, mask)
}
if (donor == 'D23' && replicate == 'RepB'){
d <- exprs(fr)
mask <- (d[,'tilex'] != 1 | d[,'tiley'] != 1) & (d[,'tilex'] != 1 | d[,'tiley'] != 2)
print(sprintf('Removing %s rows of %s for file %s', sum(!mask), nrow(fr), path))
fr <- Subset(fr, mask)
}
fr
}
fsr <- gsm@data %>% select(path, donor, replicate) %>%
pmap(load_fcs) %>% set_names(gsm@data$sample)
fsr <- flowSet(fsr)
sampleNames(fsr) <- gsm@data$sample
phenoData(fsr) <- gsm
chnl <- c("ciCD4", "ciCD8")
trans <- transformList(chnl, biexponentialTransform())
fst <- transform(fsr, trans)
gs <- GatingSet(fst)
markernames(gs) <- fsr@colnames %>% set_names(fsr@colnames)
add_pop(
gs, alias="dapi", pop="+", parent='root',
dims='niDAPI,ciDAPI', gating_method='flowClust.2d',
gating_args="K=1"
)
add_pop(
gs, alias="circularity", pop="+", parent='dapi',
dims='cellcircularity,nucleuscircularity', gating_method='flowClust.2d',
gating_args='K=1'
)
add_pop(
gs, alias="diameter", pop="+", parent='circularity',
dims='celldiameter,nucleusdiameter', gating_method='flowClust.2d',
gating_args='K=1'
)
# add_pop(
#   gs, alias="*", pop="+/-+/-", parent='diameter',
#   dims='ciCD4,ciCD8', gating_method='mindensity2',
#   gating_args="gate_range=c(3,5.5)"
# )
# Tmix gate produces slightly better results but it is likely not worth the extra complexity
filter <- flowCore::filter
add_pop(
gs, alias="*", pop="*", parent='diameter',
dims='ciCD4,ciCD8', gating_method='quadGate.tmix',
gating_args="K=3"
)
recompute(gs)
plot(gs)
nodes <- getNodes(gs, path=1)[5:8]
plotGate(
gs, nodes, stats=F,
gpar=list(nrow=2, ncol=3),
par.settings=list(
gate=list(col = "black", lwd=1),
panel.background = list(col = "white"),
strip.background = list(col = "white")
),
xlim = c(3.25, 6), ylim = c(3.5, 6.5), xbin = 0, pos=c(.5,.5)
)
variant_name <- 'v00'
df_ck <- getPopStats(subset(gs, variant==variant_name), statistic='freq', format='long') %>%
mutate(percent=100*Count/ParentCount) %>% filter(str_detect(Population, 'ciCD..ciCD..')) %>%
rename(population=Population) %>%
mutate(population=str_replace_all(population, 'ci', '')) %>%
mutate(donor=str_extract(name, 'D\\d{2}')) %>%
mutate(replicate=str_extract(name, 'Rep[A|B]')) %>%
select(donor, population, percent, replicate) %>%
as.tibble
df_ck <- getPopStats(subset(gs, variant==variant_name), statistic='freq', format='long') %>%
mutate(percent=100*Count/ParentCount) %>% filter(str_detect(Population, 'ciCD..ciCD..')) %>%
rename(population=Population) %>%
mutate(population=str_replace_all(population, 'ci', '')) %>%
mutate(donor=str_extract(name, 'D\\d{2}')) %>%
mutate(replicate=str_extract(name, 'Rep[A|B]')) %>%
select(donor, population, percent, replicate) %>%
as.tibble
filter <- dplyr::filter
variant_name <- 'v00'
df_ck <- getPopStats(subset(gs, variant==variant_name), statistic='freq', format='long') %>%
mutate(percent=100*Count/ParentCount) %>% filter(str_detect(Population, 'ciCD..ciCD..')) %>%
rename(population=Population) %>%
mutate(population=str_replace_all(population, 'ci', '')) %>%
mutate(donor=str_extract(name, 'D\\d{2}')) %>%
mutate(replicate=str_extract(name, 'Rep[A|B]')) %>%
select(donor, population, percent, replicate) %>%
as.tibble
df_flow <- tribble(
~donor, ~population, ~percent,
'D22', 'CD4+CD8+', .68,
'D22', 'CD4+CD8-', 75.8,
'D22', 'CD4-CD8+', 17.5,
'D22', 'CD4-CD8-', 6.01,
'D23', 'CD4+CD8+', 2.03,
'D23', 'CD4+CD8-', 54.1,
'D23', 'CD4-CD8+', 33.3,
'D23', 'CD4-CD8-', 10.5,
'D41', 'CD4+CD8+', 2.7,
'D41', 'CD4+CD8-', 45.3,
'D41', 'CD4-CD8+', 43.2,
'D41', 'CD4-CD8-', 8.76,
'D40', 'CD4+CD8+', 2.31,
'D40', 'CD4+CD8-', 42.7,
'D40', 'CD4-CD8+', 47.5,
'D40', 'CD4-CD8-', 7.51
) %>% mutate(replicate='RepA')
df_stats <- df_ck %>% inner_join(df_flow, by = c('donor', 'population'))
df_stats %>%
ggplot(aes(x=percent.x, y=percent.y, color=population, shape=donor)) +
geom_point() +
facet_wrap(~replicate.x)
p_stat <- bind_rows(df_ck %>% mutate(source='cytokit'), df_flow %>% mutate(source='flow')) %>%
mutate(source=str_glue('{source}-{replicate}')) %>%
mutate(pct=str_glue('{p}%', p=round(percent, 0))) %>%
filter(population != 'CD4-CD8-') %>%
ggplot(aes(x=source, y=percent, fill=population, label=pct)) +
geom_bar(stat='identity', position='fill', color='white') +
geom_text(size = 4, position=position_fill(vjust=.7)) +
scale_fill_brewer(palette='Set1', guide=guide_legend(title='')) +
scale_y_continuous(labels = scales::percent_format()) +
facet_wrap(~donor) +
xlab('') + ylab('') +
theme_bw() + theme(
panel.grid.minor.x=element_blank(),
panel.grid.minor.y=element_blank(),
panel.grid.major.x=element_blank(),
panel.grid.major.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank(),
strip.background = element_rect(colour="white", fill="white"),
# Labels version
axis.text.x = element_text(angle = 90, hjust = 1),
# Blank version
# axis.text.x = element_blank(),
# strip.text.x = element_blank()
)
p_stat
library(tidyverse)
library(flowCore)
library(openCyto)
library(ggcyto)
data_dir <- '/Volumes/disk1/cytokit/cellular-marker'
experiments <- c(
'20180614_D22_RepA_Tcell_CD4-CD8-DAPI_5by5',
'20180614_D22_RepB_Tcell_CD4-CD8-DAPI_5by5',
'20180614_D23_RepA_Tcell_CD4-CD8-DAPI_5by5',
'20180614_D23_RepB_Tcell_CD4-CD8-DAPI_5by5',
'20181116-d41-r1-20x-5by5',
'20181116-d41-r2-20x-5by5',
'20181116-d40-r1-20x-5by5',
'20181116-d40-r2-20x-5by5'
)
variants <- c('v00')
gsm <- expand.grid(experiments, variants) %>% set_names(c('experiment', 'variant')) %>%
mutate(path=str_glue('{data_dir}/{experiment}/output/{variant}/cytometry/data.fcs')) %>%
mutate(donor=str_to_upper(str_extract(experiment, '[dD]\\d{2}'))) %>%
mutate(replicate=str_extract(experiment, 'Rep[AB]|r[12]')) %>%
mutate(replicate=case_when(
replicate == 'r1' ~ 'RepA',
replicate == 'r2' ~ 'RepB',
TRUE ~ replicate
)) %>%
mutate(sample=str_glue('{donor}_{replicate}_{variant}')) %>%
as('AnnotatedDataFrame')
sampleNames(gsm) <- gsm@data$sample
load_fcs <- function(path, donor, replicate) {
fr <- read.FCS(path, column.pattern='PHA', invert.pattern = TRUE)
if (donor == 'D22' && replicate == 'RepB'){
d <- exprs(fr)
mask <- d[,'tilex'] < 4 | d[,'tiley'] > 2
print(sprintf('Removing %s rows of %s for file %s', sum(!mask), nrow(fr), path))
fr <- Subset(fr, mask)
}
if (donor == 'D23' && replicate == 'RepB'){
d <- exprs(fr)
mask <- (d[,'tilex'] != 1 | d[,'tiley'] != 1) & (d[,'tilex'] != 1 | d[,'tiley'] != 2)
print(sprintf('Removing %s rows of %s for file %s', sum(!mask), nrow(fr), path))
fr <- Subset(fr, mask)
}
fr
}
fsr <- gsm@data %>% select(path, donor, replicate) %>%
pmap(load_fcs) %>% set_names(gsm@data$sample)
fsr <- flowSet(fsr)
sampleNames(fsr) <- gsm@data$sample
phenoData(fsr) <- gsm
chnl <- c("ciCD4", "ciCD8")
trans <- transformList(chnl, biexponentialTransform())
fst <- transform(fsr, trans)
gs <- GatingSet(fst)
markernames(gs) <- fsr@colnames %>% set_names(fsr@colnames)
add_pop(
gs, alias="dapi", pop="+", parent='root',
dims='niDAPI,ciDAPI', gating_method='flowClust.2d',
gating_args="K=1"
)
add_pop(
gs, alias="circularity", pop="+", parent='dapi',
dims='cellcircularity,nucleuscircularity', gating_method='flowClust.2d',
gating_args='K=1'
)
add_pop(
gs, alias="diameter", pop="+", parent='circularity',
dims='celldiameter,nucleusdiameter', gating_method='flowClust.2d',
gating_args='K=1'
)
# add_pop(
#   gs, alias="*", pop="+/-+/-", parent='diameter',
plotGate(gs, 'diameter')
#   dims='ciCD4,ciCD8', gating_method='mindensity2',
#   gating_args="gate_range=c(3,5.5)"
# )
# Tmix gate produces slightly better results
filter <- flowCore::filter
add_pop(
gs, alias="*", pop="*", parent='diameter',
dims='ciCD4,ciCD8', gating_method='quadGate.tmix',
gating_args="K=3"
)
recompute(gs)
plot(gs)
plotGate(gs, 'diameter')
length(gs)
plotGate(gs, 'diameter', gpar=list(nrow=2, ncol=4))
?plotGate
plotGate(gs, 'diameter', gpar=list(nrow=2, ncol=2))
plotGate(gs, 'diameter', gpar=list(nrow=2, ncol=4), nrow=2, ncol=4)
?plotGate
?plotflowWorkspace.par.get('ncol')
flowWorkspace.par.get('ncol')
flowWorkspace.par.get('ncols')
plotGate(gs, 'diameter', layout=list(nrow=2, ncol=4))
plotGate(gs, 'diameter', layout=c(2,4))
plotGate(gs, 'diameter', layout=c(4,2))
?plotGate
flowWorkspace.par.set("plotGate", list(xlim = "data", ylim = "data"))
plotGate(gs, 'diameter', layout=c(4,2))
flowWorkspace.par.set("plotGate", list(xlim = "data", ylim = "data", layout=c(4,2)))
plotGate(gs, 'diameter')
plotGate(gs, 'dapi', layout=c(4,2))
plotGate(gs, 'circularity', layout=c(4,2))
nodes <- getNodes(gs, path=1)[5:8]
plotGate(
gs, nodes, stats=F,
layout=c(4,2),
par.settings=list(
gate=list(col = "black", lwd=1),
panel.background = list(col = "white"),
strip.background = list(col = "white")
),
xlim = c(3.25, 6), ylim = c(3.5, 6.5), xbin = 0, pos=c(.5,.5)
)
plotGate(
gs, nodes, stats=F,
layout=c(4,2),
par.settings=list(
gate=list(col = "black", lwd=1),
panel.background = list(col = "white"),
strip.background = list(col = "white"),
par.xlab.text = list(cex = 1.5)
),
xlim = c(3.25, 6), ylim = c(3.5, 6.5),
xbin = 100
)
plotGate(
gs, nodes, stats=F,
layout=c(4,2),
par.settings=list(
gate=list(col = "black", lwd=1),
panel.background = list(col = "white"),
strip.background = list(col = "white"),
par.xlab.text = list(cex = .5)
),
xlim = c(3.25, 6), ylim = c(3.5, 6.5),
xbin = 100
)
plotGate(
gs, nodes, stats=F,
layout=c(4,2),
par.settings=list(
gate=list(col = "black", lwd=1),
panel.background = list(col = "white"),
strip.background = list(col = "white"),
axis.text = list(cex = .5)
),
xlim = c(3.25, 6), ylim = c(3.5, 6.5),
xbin = 100
)
plotGate(
gs, nodes, stats=F,
layout=c(4,2),
par.settings=list(
gate=list(col = "black", lwd=1),
panel.background = list(col = "white"),
strip.background = list(col = "white"),
axis.text = list(cex = .5)
),
xlim = c(3.25, 6), ylim = c(3.5, 6.5),
xbin = 0
)
nodes <- getNodes(gs, path=1)[5:8]
plotGate(
gs, nodes, stats=F,
layout=c(4,2),
par.settings=list(
gate=list(col = "black", lwd=1),
panel.background = list(col = "white"),
strip.background = list(col = "white"),
axis.text = list(cex = .5)
),
xlim = c(3.25, 6), ylim = c(3.5, 6.5),
xbin = 0,
scales=list(alternating=FALSE)
)
plotGate(
gs, nodes,
stats=FALSE,
layout=c(4,2),
par.settings=list(
gate=list(col = "black", lwd=1),
panel.background = list(col = "white"),
strip.background = list(col = "white"),
axis.text = list(cex = .5)
),
xlim = c(3.25, 6), ylim = c(3.5, 6.5),
xbin = 0,
marker.only = TRUE,
scales=list(alternating=FALSE)
)
filter <- dplyr::filter
variant_name <- 'v00'
df_ck <- getPopStats(subset(gs, variant==variant_name), statistic='freq', format='long') %>%
mutate(percent=100*Count/ParentCount) %>% filter(str_detect(Population, 'ciCD..ciCD..')) %>%
rename(population=Population) %>%
mutate(population=str_replace_all(population, 'ci', '')) %>%
mutate(donor=str_extract(name, 'D\\d{2}')) %>%
mutate(replicate=str_extract(name, 'Rep[A|B]')) %>%
select(donor, population, percent, replicate) %>%
as.tibble
df_flow <- tribble(
~donor, ~population, ~percent,
'D22', 'CD4+CD8+', .68,
'D22', 'CD4+CD8-', 75.8,
'D22', 'CD4-CD8+', 17.5,
'D22', 'CD4-CD8-', 6.01,
'D23', 'CD4+CD8+', 2.03,
'D23', 'CD4+CD8-', 54.1,
'D23', 'CD4-CD8+', 33.3,
'D23', 'CD4-CD8-', 10.5,
'D41', 'CD4+CD8+', 2.7,
'D41', 'CD4+CD8-', 45.3,
'D41', 'CD4-CD8+', 43.2,
'D41', 'CD4-CD8-', 8.76,
'D40', 'CD4+CD8+', 2.31,
'D40', 'CD4+CD8-', 42.7,
'D40', 'CD4-CD8+', 47.5,
'D40', 'CD4-CD8-', 7.51
) %>% mutate(replicate='RepA')
df_stats <- df_ck %>% inner_join(df_flow, by = c('donor', 'population'))
p_stat <- bind_rows(df_ck %>% mutate(source='cytokit'), df_flow %>% mutate(source='flow')) %>%
mutate(source=str_glue('{source}-{replicate}')) %>%
mutate(pct=str_glue('{p}%', p=round(percent, 0))) %>%
filter(population != 'CD4-CD8-') %>%
ggplot(aes(x=source, y=percent, fill=population, label=pct)) +
geom_bar(stat='identity', position='fill', color='white') +
geom_text(size = 4, position=position_fill(vjust=.7)) +
scale_fill_brewer(palette='Set1', guide=guide_legend(title='')) +
scale_y_continuous(labels = scales::percent_format()) +
facet_wrap(~donor) +
xlab('') + ylab('') +
theme_bw() + theme(
panel.grid.minor.x=element_blank(),
panel.grid.minor.y=element_blank(),
panel.grid.major.x=element_blank(),
panel.grid.major.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank(),
strip.background = element_rect(colour="white", fill="white"),
# Labels version
axis.text.x = element_text(angle = 90, hjust = 1),
# Blank version
# axis.text.x = element_blank(),
# strip.text.x = element_blank()
)
p_stat
gridExtra::marrangeGrob(list(p_xy, p_stat), nrow=1, ncol=2)
gridExtra::marrangeGrob(list(p_xy, p_stat), nrow=1, ncol=2)
gridExtra::marrangeGrob(list(p_xy, p_stat), nrow=1, ncol=2)
p_xy <- plotGate(
gs, nodes,
stats=FALSE,
layout=c(4,2),
par.settings=list(
gate=list(col = "black", lwd=1),
panel.background = list(col = "white"),
strip.background = list(col = "white"),
axis.text = list(cex = .5)
),
xlim = c(3.25, 6), ylim = c(3.5, 6.5),
xbin = 0,
marker.only = TRUE,
scales=list(alternating=FALSE)
)
gridExtra::marrangeGrob(list(p_xy, p_stat), nrow=1, ncol=2)
plot(gs)
library(tidyverse)
library(flowCore)
library(openCyto)
library(ggcyto)
library(knitr)
knitr::opts_chunk$set(fig.width=12)
filter <- flowCore::filter
data_dir <- '/Volumes/disk1/cytokit/cellular-marker'
# Define experiment names and variants to run analysis for
experiments <- c(
'20180614_D22_RepA_Tcell_CD4-CD8-DAPI_5by5',
'20180614_D22_RepB_Tcell_CD4-CD8-DAPI_5by5',
'20180614_D23_RepA_Tcell_CD4-CD8-DAPI_5by5',
'20180614_D23_RepB_Tcell_CD4-CD8-DAPI_5by5',
'20181116-d41-r1-20x-5by5',
'20181116-d41-r2-20x-5by5',
'20181116-d40-r1-20x-5by5',
'20181116-d40-r2-20x-5by5'
)
variants <- c('v00')
gsm <- expand.grid(experiments, variants) %>% set_names(c('experiment', 'variant')) %>%
mutate(path=str_glue('{data_dir}/{experiment}/output/{variant}/cytometry/data.fcs')) %>%
mutate(donor=str_to_upper(str_extract(experiment, '[dD]\\d{2}'))) %>%
mutate(replicate=str_extract(experiment, 'Rep[AB]|r[12]')) %>%
mutate(replicate=case_when(
replicate == 'r1' ~ 'RepA',
replicate == 'r2' ~ 'RepB',
TRUE ~ replicate
)) %>%
mutate(sample=str_glue('{donor}_{replicate}_{variant}')) %>%
as('AnnotatedDataFrame')
sampleNames(gsm) <- gsm@data$sample
load_fcs <- function(path, donor, replicate) {
fr <- read.FCS(path, column.pattern='PHA', invert.pattern = TRUE)
if (donor == 'D22' && replicate == 'RepB'){
d <- exprs(fr)
mask <- d[,'tilex'] < 4 | d[,'tiley'] > 2
print(sprintf('Removing %s rows of %s for file %s', sum(!mask), nrow(fr), path))
fr <- Subset(fr, mask)
}
if (donor == 'D23' && replicate == 'RepB'){
d <- exprs(fr)
mask <- (d[,'tilex'] != 1 | d[,'tiley'] != 1) & (d[,'tilex'] != 1 | d[,'tiley'] != 2)
print(sprintf('Removing %s rows of %s for file %s', sum(!mask), nrow(fr), path))
fr <- Subset(fr, mask)
}
fr
}
fsr <- gsm@data %>% select(path, donor, replicate) %>%
pmap(load_fcs) %>% set_names(gsm@data$sample)
fsr <- flowSet(fsr)
sampleNames(fsr) <- gsm@data$sample
phenoData(fsr) <- gsm
chnl <- c("ciCD4", "ciCD8")
trans <- transformList(chnl, biexponentialTransform())
fst <- transform(fsr, trans)
gs <- GatingSet(fst)
markernames(gs) <- fsr@colnames %>% set_names(fsr@colnames)
add_pop(
gs, alias="dapi", pop="+", parent='root',
dims='niDAPI,ciDAPI', gating_method='flowClust.2d',
gating_args="K=1"
)
add_pop(
gs, alias="circularity", pop="+", parent='dapi',
dims='cellcircularity,nucleuscircularity', gating_method='flowClust.2d',
gating_args='K=1'
)
add_pop(
gs, alias="diameter", pop="+", parent='circularity',
dims='celldiameter,nucleusdiameter', gating_method='flowClust.2d',
gating_args='K=1'
)
add_pop(
gs, alias="*", pop="*", parent='diameter',
dims='ciCD4,ciCD8', gating_method='quadGate.tmix',
gating_args="K=3"
)
recompute(gs)
plot(gs)
dev.cur()
plot(gs)
